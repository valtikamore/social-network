{"version":3,"sources":["pages/dialogs/Dialogs.module.scss","pages/dialogs/DialogItem/DialogItem.module.scss","pages/dialogs/DialogItem/DialogsItem.tsx","pages/dialogs/Message/Message.tsx","pages/dialogs/SendMessage.tsx","pages/dialogs/Dialogs.tsx","Hoc/withAuthRedirect.tsx","pages/dialogs/DialogsContainer.ts"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","grid","to","src","img","alt","dialogAvatar","dialogText","activeClassName","dialogUsername","name","Message","message","maxLengthCreator100","maxLengthCreator","Dialogs","React","memo","dialogsPage","sendMessage","dialogsElements","dialogs","reverse","map","messagesElements","messages","dialogsHeader","dialogItems","DialogsReduxForm","onSubmit","values","sendNewMessage","reduxForm","form","handleSubmit","Field","placeholder","component","Textarea","validate","required","mstp","state","isAuth","auth","compose","connect","dispatch","messageText","sendMessageCreator","Component","rest"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,cAAgB,+BAA+B,YAAc,6BAA6B,SAAW,0BAA0B,QAAU,2B,oBCA9LD,EAAOC,QAAU,CAAC,KAAO,yBAAyB,eAAiB,mCAAmC,WAAa,+BAA+B,aAAe,iCAAiC,OAAS,2BAA2B,OAAS,6B,gICqBhOC,EAX8B,SAACC,GAC1C,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACI,sBAAKC,UAAS,UAAKC,IAAQC,OAAb,YAAuBD,IAAQE,OAA/B,YAAyCF,IAAQG,MAA/D,UACI,cAAC,IAAD,CAASC,GAAIP,EAAb,SAAoB,qBAAKQ,IAAKT,EAAMU,IAAKC,IAAI,KAAKR,UAAWC,IAAQQ,iBACrE,qBAAKT,UAAWC,IAAQS,WAAxB,uBACA,cAAC,IAAD,CAASL,GAAIP,EAAMa,gBAAiBV,IAAQE,OAASH,UAAWC,IAAQW,eAAxE,SAAyFf,EAAMgB,WCF5FC,EANwB,SAACjB,GACpC,OACI,qBAAKG,UAAWC,IAAQc,QAAxB,SAAmClB,EAAMkB,W,kCCL3CC,EAAqBC,YAAiB,KCEtCC,EAASC,IAAMC,MAAM,SAACvB,GAA8B,IACjDwB,EAA4BxB,EAA5BwB,YAAaC,EAAezB,EAAfyB,YAEdC,EAAkB,YAAIF,EAAYG,SAASC,UAC1CC,KAAI,SAAAxB,GAAM,OAAI,cAAC,EAAD,CAA4BW,KAAMX,EAAOW,KAAMd,GAAIG,EAAOH,GAAIQ,IAAKL,EAAOK,KAAzDL,EAAOH,OACvC4B,EAAmBN,EAAYO,SAC9BF,KAAI,SAAAX,GAAO,OAAI,cAAC,EAAD,CAA0BA,QAASA,EAAQA,QAAShB,GAAIgB,EAAQhB,IAAlDgB,EAAQhB,OAO1C,OACI,sBAAKC,UAAWC,IAAQuB,QAAxB,UACI,oBAAIxB,UAAWC,IAAQ4B,cAAvB,sBACA,qBAAK7B,UAAWC,IAAQ6B,YAAxB,SACKP,IAEL,sBAAKvB,UAAWC,IAAQ2B,SAAxB,UACI,8BAAMD,IACN,cAACI,EAAD,CAAkBC,SAbR,SAACC,GACnBX,EAAYW,EAAOC,4BAuBdH,EAAmBI,YAAmE,CAC/FC,KAAM,yBADsBD,EDjC2E,SAACtC,GAExG,OACI,uBAAMmC,SAAUnC,EAAMwC,aAAtB,UACI,cAACC,EAAA,EAAD,CACIC,YAAa,cACbC,UAAWC,IACX5B,KAAM,iBACN6B,SAAU,CAACC,IAAS3B,GAJxB,eAMA,gDC0BGE,I,uCClCT0B,EAAO,SAACC,GACV,MAAO,CACHC,OAAOD,EAAME,KAAKD,SCmBXE,4BACXC,aAhBoB,SAACJ,GACrB,MAAO,CACHxB,YAAawB,EAAMxB,gBAGA,SAAC6B,GACxB,MAAO,CACH5B,YAAa,SAAC6B,GACVD,EAASE,YAAmBD,UDRjC,SAA8BE,GAUjC,OAAOJ,YAAQL,EAARK,EATmB,SAACpD,GACAA,EAAlBiD,OAD6C,IACnCQ,EADkC,YAC1BzD,EAD0B,YAEjD,OAAKA,EAAMiD,OAGJ,cAACO,EAAD,eAAeC,IAFX,cAAC,IAAD,CAAUjD,GAAI,gBCWlB2C,CAGb9B","file":"static/js/4.e1ae097b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2jKg-\",\"dialogsHeader\":\"Dialogs_dialogsHeader__1uhba\",\"dialogItems\":\"Dialogs_dialogItems__2iaUW\",\"messages\":\"Dialogs_messages__39Hmp\",\"message\":\"Dialogs_message__3s-b2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"DialogItem_grid__2jjpJ\",\"dialogUsername\":\"DialogItem_dialogUsername__1vq4s\",\"dialogText\":\"DialogItem_dialogText__3bNni\",\"dialogAvatar\":\"DialogItem_dialogAvatar__1EkDy\",\"dialog\":\"DialogItem_dialog__8trGW\",\"active\":\"DialogItem_active__1W4XC\"};","import React from 'react'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n\r\nimport classes from \"./DialogItem.module.scss\";\r\n\r\ntype DialogItemType = {\r\n    id:number\r\n    img:string\r\n    name:string\r\n}\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n    let path = '/dialogs/' + props.id\r\n    return (\r\n        <div className={`${classes.dialog} ${classes.active} ${classes.grid}`} >\r\n            <NavLink to={path} ><img src={props.img} alt=\"aa\" className={classes.dialogAvatar}/></NavLink>\r\n            <div className={classes.dialogText}>some text</div>\r\n            <NavLink to={path} activeClassName={classes.active}  className={classes.dialogUsername}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem\r\n","import React from 'react'\r\nimport classes from '../Dialogs.module.scss';\r\n\r\n\r\ntype messageType = {\r\n    id:number\r\n    message:string|undefined\r\n}\r\n\r\nconst Message : React.FC<messageType>= (props) => {\r\n    return (\r\n        <div className={classes.message} >{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import React, {FC} from 'react'\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {sendMessageExtendsFormDataType, sendMessageFormDataType} from \"./Dialogs\";\r\nimport {Textarea} from \"../../components/common/formsControl/FormsControl\";\r\nimport {maxLengthCreator, required} from \"../../utils/validate/validators\";\r\n\r\nconst maxLengthCreator100 =maxLengthCreator(100)\r\nexport const SendMessage: FC<InjectedFormProps<sendMessageFormDataType> & sendMessageExtendsFormDataType>= (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                placeholder={'create post'}\r\n                component={Textarea}\r\n                name={'sendNewMessage'}\r\n                validate={[required,maxLengthCreator100]}\r\n            > </Field>\r\n            <button >send</button>\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport classes from \"./Dialogs.module.scss\";\r\nimport DialogItem from \"./DialogItem/DialogsItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {SendMessage} from './SendMessage';\r\n\r\nconst Dialogs =React.memo( (props: DialogsPropsType)  => {\r\n    let {dialogsPage, sendMessage} = props;\r\n\r\n    let dialogsElements = [...dialogsPage.dialogs].reverse()\r\n        .map(dialog => <DialogItem key={dialog.id} name={dialog.name} id={dialog.id} img={dialog.img}/>)\r\n    let messagesElements = dialogsPage.messages\r\n        .map(message => <Message key={message.id} message={message.message} id={message.id}/>)\r\n\r\n    const addNewMessage = (values: sendMessageFormDataType) => {\r\n        sendMessage(values.sendNewMessage)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <h2 className={classes.dialogsHeader}> Dialogs</h2>\r\n            <div className={classes.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <DialogsReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport type sendMessageFormDataType = {\r\n    sendNewMessage: string\r\n}\r\nexport type sendMessageExtendsFormDataType = {}\r\n\r\nexport const DialogsReduxForm = reduxForm<sendMessageFormDataType, sendMessageExtendsFormDataType>({\r\n    form: 'dialogsAddMessageForm'\r\n})(SendMessage)\r\nexport default Dialogs\r\n","import React, {ComponentType} from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\ntype mapStateToProps = {\r\n    isAuth:boolean\r\n}\r\n\r\nconst mstp = (state:AppRootStateType) : mapStateToProps => {\r\n    return {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function WithAuthRedirect <T>(Component:ComponentType<T>)  {\r\n    const RedirectComponent = (props:mapStateToProps) => {\r\n        let {isAuth,...rest} = props\r\n        if (!props.isAuth){\r\n            return <Redirect to={'/login'}/>\r\n        }\r\n        return <Component {...rest as T}/>\r\n    }\r\n\r\n\r\n    return connect(mstp)(RedirectComponent)\r\n}","import {DialogsPageStateType, sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {WithAuthRedirect} from \"../../Hoc/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogsPageStateType\r\n}\r\ntype MapDispatchToProps = {\r\n    sendMessage: (messageText:string) => void\r\n}\r\nexport type DialogsPropsType = MapStatePropsType & MapDispatchToProps\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToProps => {\r\n    return {\r\n        sendMessage: (messageText:string) => {\r\n            dispatch(sendMessageCreator(messageText))\r\n        },\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)"],"sourceRoot":""}